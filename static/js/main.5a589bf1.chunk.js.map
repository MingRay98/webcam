{"version":3,"sources":["App.js","Main.js","serviceWorker.js","index.js"],"names":["VideoOutput","props","gg","React","createRef","console","log","this","videoObj","current","srcObject","video","play","ref","Component","Main","handleSliderChange","e","setState","scale","target","value","drawVideoToCanvas","canvas","getContext","clearRect","width","height","parseFloat","state","imageWidth","imageHeight","dx","dy","drawImage","requestAnimationFrame","takePhoto","imgSrc","toDataURL","startVideo","document","getElementById","canvas2","slider","onchange","navigator","mediaDevices","getUserMedia","min","ideal","max","audio","stream","alert","style","margin","videoRef","autoPlay","id","display","type","step","defaultValue","onClick","alt","src","Boolean","window","location","hostname","match","ReactDOM","render","serviceWorker","ready","then","registration","unregister"],"mappings":"+QAEMA,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,GAAKC,IAAMC,YAFC,E,iFAMjBC,QAAQC,IAAIC,KAAKL,IACjB,IAAMM,EAAWD,KAAKL,GAAGO,QACzBD,EAASE,UAAYH,KAAKN,MAAMU,MAChCH,EAASI,S,+BAKT,OAAO,2BAAOC,IAAKN,KAAKL,S,GAfFC,IAAMW,WCuGjBC,GDnFGZ,IAAMW,UAoDFX,IAAMW,U,YCvE1B,WAAYb,GAAQ,IAAD,8BACjB,4CAAMA,KA4BRe,mBAAqB,SAACC,GAEpB,EAAKC,SAAS,CAAEC,MAAOF,EAAEG,OAAOC,SA/Bf,EAsDnBC,kBAAoB,WAGlB,EAAKC,OAAOC,WAAW,MAAMC,UAAU,EAAG,EAAG,EAAKF,OAAOG,MAAO,EAAKH,OAAOI,QAE5E,IAAIR,EAAQS,WAAW,EAAKC,MAAMV,OAE9BW,EAAa,EAAKP,OAAOG,MAAQP,EACjCY,EAAc,EAAKR,OAAOI,OAASR,EAGnCa,EAAK,EAAKT,OAAOG,MAAQ,EAAII,EAAa,EAC1CG,EAAK,EAAKV,OAAOI,OAAS,EAAII,EAAc,EAEhD1B,QAAQC,IAAIa,GAGZ,EAAKI,OAAOC,WAAW,MAAMU,UAAU,EAAKvB,MAAOqB,EAAIC,EAAIH,EAAYC,GAIvEI,sBAAsB,EAAKb,oBA3EV,EAiFnBc,UAAY,WAGV,EAAKlB,SAAS,CAACmB,OAAS,EAAKd,OAAOe,eAlFpC,EAAKT,MAAQ,CACXV,MAAO,IACPkB,OAAQ,IAJO,E,iFASjB9B,KAAKgC,aACLhC,KAAKgB,OAASiB,SAASC,eAAe,UACtClC,KAAKmC,QAAUF,SAASC,eAAe,YACvClC,KAAKI,MAAQ6B,SAASC,eAAe,SACrClC,KAAKoC,OAASH,SAASC,eAAe,gBACtClC,KAAKgB,OAAOG,MAAQ,KACpBnB,KAAKgB,OAAOI,OAAS,IAErBpB,KAAKe,oBAELf,KAAKoC,OAAOC,SAAWrC,KAAKS,qB,0NAmBL6B,UAAUC,aAAaC,aAAa,CACvDpC,MAAO,CACLe,MAAO,CAAEsB,IAAK,KAAMC,MAAO,KAAMC,IAAK,MACtCvB,OAAQ,CAAEqB,IAAK,IAAKC,MAAO,IAAKC,IAAK,OAEvCC,OAAO,I,OALHC,E,OAUN7C,KAAKI,MAAMD,UAAY0C,E,gDAEvBC,MAAM,EAAD,I,8IAuCP,OAEE,yBAAKC,MAAO,CAAEC,OAAQ,SACpB,2BAAO1C,IAAKN,KAAKiD,SAAUC,UAAU,EAAMC,GAAG,QAAQJ,MAAO,CAAEK,QAAS,UACxE,4BAAQD,GAAG,WAAW,6BACtB,2BAAOE,KAAK,QAAQZ,IAAI,MAAME,IAAI,MAAMW,KAAK,MAAMC,aAAa,IAAIJ,GAAG,iBACvE,4BAAQK,QAASxD,KAAK6B,WAAtB,gBACA,yBAAK4B,IAAI,GAAGN,GAAG,WAAWO,IAAO1D,KAAKsB,MAAMQ,c,GAjGjCvB,cCUCoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAUhC,SAASC,eAAe,SD0H5C,kBAAmBI,WACrBA,UAAU4B,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5a589bf1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass VideoOutput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.gg = React.createRef();\n  }\n\n  componentDidMount() {\n    console.log(this.gg);\n    const videoObj = this.gg.current;\n    videoObj.srcObject = this.props.video;\n    videoObj.play();\n     \n  }\n\n  render() {\n    return <video ref={this.gg}></video>;\n  }\n}\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      video: null\n    };\n\n    this.handleVideoClick = this.handleVideoClick.bind(this);\n  }\n\n\n  async getVideo() {\n    const video = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: {\n        width: { min: 1024, ideal: 1280, max: 1920 },\n        height: { min: 776, ideal: 720, max: 1080 }\n      }\n    })\n    // console.log(video);\n    this.setState({ video });\n  }\n\n  stopVideo() {\n    this.state.video.getTracks().forEach(track => track.stop());\n    this.setState({ video: null });\n  }\n\n\n  handleVideoClick() {\n    if (this.state.video) {\n      this.stopVideo();\n    } else {\n      this.getVideo();\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleVideoClick}>\n          {this.state.video ? 'Vid On' : 'Vid Off'}\n        </button>\n        <div>\n          {this.state.video ? <VideoOutput video={this.state.video} ss={'123'} /> : ''}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass MyVideo extends React.Component {\n  constructor() {\n    super();\n    this.videoRef = React.createRef();\n  }\n\n  async startVideo() {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: { facingMode: \"user\" },\n        audio: true\n      });\n\n      this.videoStream = stream;\n      this.videoRef.current.srcObject = stream;\n    } catch (e) {\n      alert(e);\n    }\n  }\n\n  async stopVideo() {\n    if (this.videoStream) {\n      this.videoStream.getVideoTracks().forEach((track) => {\n        track.stop();\n      });\n      this.videoStream.getAudioTracks().forEach((track) => {\n        track.stop();\n      });\n\n      this.videoStream = null;\n      this.videoRef.current.srcObject = null;\n    }\n  }\n\n  render() {\n    return (\n      <div class='container'>\n        <video ref={this.videoRef} playsInline={true} autoPlay={true} />\n        <button onClick={() => this.startVideo()}>start</button>\n        <button onClick={() => this.stopVideo()}>stop</button>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React, { Component } from 'react';\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      scale: '1',\r\n      imgSrc: ''\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.startVideo();\r\n    this.canvas = document.getElementById('canvas');\r\n    this.canvas2 = document.getElementById('photocut');\r\n    this.video = document.getElementById('video');\r\n    this.slider = document.getElementById('很滑');\r\n    this.canvas.width = 1024;\r\n    this.canvas.height = 776;\r\n\r\n    this.drawVideoToCanvas();\r\n\r\n    this.slider.onchange = this.handleSliderChange;\r\n\r\n\r\n    // console.log(this.slider);\r\n  }\r\n\r\n  componentWillMount() {\r\n\r\n  }\r\n\r\n  handleSliderChange = (e) => {\r\n\r\n    this.setState({ scale: e.target.value });\r\n\r\n  }\r\n\r\n\r\n  async startVideo() {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        video: {\r\n          width: { min: 1024, ideal: 1280, max: 1920 },\r\n          height: { min: 776, ideal: 720, max: 1080 }\r\n        },\r\n        audio: false\r\n      });\r\n\r\n      // this.videoStream = stream;\r\n      // window.stream = stream;\r\n      this.video.srcObject = stream;\r\n    } catch (e) {\r\n      alert(e);\r\n    }\r\n  }\r\n\r\n  drawVideoToCanvas = () => {\r\n\r\n    \r\n    this.canvas.getContext('2d').clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n    let scale = parseFloat(this.state.scale);\r\n\r\n    var imageWidth = this.canvas.width * scale;\r\n    var imageHeight = this.canvas.height * scale;\r\n\r\n    //畫布上的起始點：畫布的大小一半減去圖像大小的一半。可以為負數，表示在左上角的外面。\r\n    var dx = this.canvas.width / 2 - imageWidth / 2;\r\n    var dy = this.canvas.height / 2 - imageHeight / 2;\r\n\r\n    console.log(scale);\r\n\r\n\r\n    this.canvas.getContext('2d').drawImage(this.video, dx, dy, imageWidth, imageHeight);\r\n\r\n    \r\n\r\n    requestAnimationFrame(this.drawVideoToCanvas);\r\n\r\n  }\r\n\r\n\r\n\r\n  takePhoto = () => {\r\n\r\n\r\n    this.setState({imgSrc : this.canvas.toDataURL()});\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <div style={{ margin: \"auto\" }}>\r\n        <video ref={this.videoRef} autoPlay={true} id=\"video\" style={{ display: 'none' }} />\r\n        <canvas id=\"canvas\" /><br />\r\n        <input type=\"range\" min=\"0.5\" max=\"1.5\" step=\"0.1\" defaultValue=\"1\" id=\"很滑\" />\r\n        <button onClick={this.takePhoto}>take a photo</button>\r\n        <img alt='' id=\"photocut\" src = {this.state.imgSrc} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Main from './Main'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}